/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vipetablelogic;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arib
 */
public class NewJFrame extends javax.swing.JFrame {
    Directory dir;
    File location;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        dir = new Directory();
        writeGrid();
        updateTable();
        updateAvailSize();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        AddDialog_FileNameTextFiel = new javax.swing.JTextField();
        addDialog_fileSizeTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        addDialog_AddFileButton = new javax.swing.JButton();
        addDialog_CancelButton = new javax.swing.JButton();
        editDialog = new javax.swing.JDialog();
        EditDialog_NewSizeTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        EditDialog_EditFileButton = new javax.swing.JButton();
        EditDialog_CancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        graphPanel = new GridPanel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileTable = new javax.swing.JTable();
        edittingPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        AvailableSize = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        UsedSpace = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        OpenFile = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        Close = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        addDialog.setMinimumSize(new java.awt.Dimension(450, 200));
        addDialog.setResizable(false);

        jLabel1.setText("File Name");

        AddDialog_FileNameTextFiel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDialog_FileNameTextFielActionPerformed(evt);
            }
        });

        jLabel2.setText("File Size");

        addDialog_AddFileButton.setText("Add File");
        addDialog_AddFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDialog_AddFileButtonActionPerformed(evt);
            }
        });

        addDialog_CancelButton.setText("Cancel");
        addDialog_CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDialog_CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addDialogLayout = new javax.swing.GroupLayout(addDialog.getContentPane());
        addDialog.getContentPane().setLayout(addDialogLayout);
        addDialogLayout.setHorizontalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDialogLayout.createSequentialGroup()
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addDialogLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(73, 73, 73)
                        .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addDialog_fileSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddDialog_FileNameTextFiel, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addDialogLayout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(addDialog_AddFileButton)
                        .addGap(40, 40, 40)
                        .addComponent(addDialog_CancelButton)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        addDialogLayout.setVerticalGroup(
            addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addDialogLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(AddDialog_FileNameTextFiel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDialog_fileSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(29, 29, 29)
                .addGroup(addDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDialog_AddFileButton)
                    .addComponent(addDialog_CancelButton))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        editDialog.setMinimumSize(new java.awt.Dimension(450, 200));
        editDialog.setResizable(false);

        jLabel4.setText("Change");

        EditDialog_EditFileButton.setText("Change Size");
        EditDialog_EditFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDialog_EditFileButtonActionPerformed(evt);
            }
        });

        EditDialog_CancelButton.setText("Cancel");
        EditDialog_CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditDialog_CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editDialogLayout = new javax.swing.GroupLayout(editDialog.getContentPane());
        editDialog.getContentPane().setLayout(editDialogLayout);
        editDialogLayout.setHorizontalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel4)
                        .addGap(81, 81, 81)
                        .addComponent(EditDialog_NewSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editDialogLayout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(EditDialog_EditFileButton)
                        .addGap(40, 40, 40)
                        .addComponent(EditDialog_CancelButton)))
                .addContainerGap(118, Short.MAX_VALUE))
        );
        editDialogLayout.setVerticalGroup(
            editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editDialogLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditDialog_NewSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(29, 29, 29)
                .addGroup(editDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditDialog_EditFileButton)
                    .addComponent(EditDialog_CancelButton))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(699, 960));
        setResizable(false);

        graphPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        tablePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "File Name", "Color", "ID", "Size"
            }
        ));
        jScrollPane2.setViewportView(fileTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        edittingPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        edittingPanel.setPreferredSize(new java.awt.Dimension(223, 89));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout edittingPanelLayout = new javax.swing.GroupLayout(edittingPanel);
        edittingPanel.setLayout(edittingPanelLayout);
        edittingPanelLayout.setHorizontalGroup(
            edittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edittingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addButton)
                .addGap(18, 18, 18)
                .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editButton)
                .addContainerGap())
        );
        edittingPanelLayout.setVerticalGroup(
            edittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edittingPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(edittingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(deleteButton)
                    .addComponent(editButton))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        infoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextField1.setEditable(false);
        jTextField1.setText("Max Size");
        jTextField1.setBorder(null);

        jTextField2.setEditable(false);
        jTextField2.setText("600");
        jTextField2.setBorder(null);

        jTextField3.setEditable(false);
        jTextField3.setText("Available Size");
        jTextField3.setBorder(null);

        AvailableSize.setEditable(false);
        AvailableSize.setText("0");
        AvailableSize.setBorder(null);

        jTextField4.setEditable(false);
        jTextField4.setText("Used Space");
        jTextField4.setBorder(null);

        UsedSpace.setEditable(false);
        UsedSpace.setText("0");
        UsedSpace.setBorder(null);
        UsedSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsedSpaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addComponent(AvailableSize)
                    .addComponent(UsedSpace))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsedSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AvailableSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(edittingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(edittingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jMenu1.setText("File");

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        jMenu1.add(New);

        OpenFile.setText("Open");
        OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileActionPerformed(evt);
            }
        });
        jMenu1.add(OpenFile);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        SaveAs.setText("Save As");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(SaveAs);

        Close.setText("Close");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        jMenu1.add(Close);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //shows the addDialog
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        //vtl.writeData(null, WIDTH);
        addDialog.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed
    //unused method
    private void AddDialog_FileNameTextFielActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDialog_FileNameTextFielActionPerformed
        // TODO add your handling code here: DO NOT IMPLEMENT
        /* GridPanel gp = (GridPanel) jpanel2;
            gp.updateGrid();
        
        */
    }//GEN-LAST:event_AddDialog_FileNameTextFielActionPerformed
    //if cancel is pressed then close the window
    private void addDialog_CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDialog_CancelButtonActionPerformed
        addDialog.setVisible(false);
        addDialog.dispose();
    }//GEN-LAST:event_addDialog_CancelButtonActionPerformed
    //add the File
    private void addDialog_AddFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDialog_AddFileButtonActionPerformed
        boolean fileName = true;
        boolean fileSize = false;
        int i = 0;
        String f = AddDialog_FileNameTextFiel.getText();
        //make sure the string isnt empty
        if(f.equals("")) {
            fileName = false;
        }
        //make sure their is a useable number
        if(!addDialog_fileSizeTextField.getText().equals("")) {
            try {
                i = Integer.parseInt(addDialog_fileSizeTextField.getText());
                fileSize = true;
            } catch(NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, "couldn't parse int");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "c");
            editDialog.setVisible(false);
            editDialog.dispose();
        }
        //if legal add the file
        if(fileName && fileSize && i <= Integer.parseInt(AvailableSize.getText())) {
            writeData(f, i);
            addDialog.setVisible(false);
            addDialog.dispose();
        }
        else
            JOptionPane.showMessageDialog(this, "Size too large");
        //ipdate table grid and available size
        writeGrid();
        updateTable();
        updateAvailSize();

    }//GEN-LAST:event_addDialog_AddFileButtonActionPerformed
    //loading method
    private void OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileActionPerformed
        System.out.println("Open File");
        //open file chooser
        JFileChooser jfc = new JFileChooser();
        //if load is pressed
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = jfc.getSelectedFile();  //create file
                FileInputStream fis = new FileInputStream(file);            //set mode to input
                ObjectInputStream truck = new ObjectInputStream(fis);       //create the truck to transfer
                try {
                dir = (Directory) truck.readObject();                       //save to dir
                } catch (ClassNotFoundException cnfe) {
                    JOptionPane.showMessageDialog(this, cnfe); //show error
                }
            } catch(IOException e) {
                JOptionPane.showMessageDialog(this, e.toString());  //shoe other error
            }
        }
        //update info
        writeGrid();
        updateTable();
        updateAvailSize();
    }//GEN-LAST:event_OpenFileActionPerformed
    //returns string of chunks
    public String getChunkString(int fileID) {
        return "";
    }
    //returns the total number of unmarked sectors
    public int getAvailableSize() {
        int count = 0;
        for (int i = 0; i < dir.sectors.length; i++) {
            if(dir.sectors[i] == 0)
                count++;
        }
        return count;
    }
    //checks if given id is not already used
    private boolean isIdAvailable(int fileID) {
        for(VipeFile file : dir.files) {
            if(file.getFileID() == fileID)
                return false;
        }
        return true;
    }
    //gets index from an ID
    private int getFileIndexFromID(int fileID)
    {
        int index = 0;
        boolean fileFound = false;
        VipeFile file = new VipeFile(0,"",Color.WHITE,0);
        ArrayList<VipeFile> files = dir.getFiles();
        if(files.get(0).getFileID() == fileID)
            file = files.get(0);
        else
        {
            index++;
            while(!fileFound && index < files.size())
            {
                if(files.get(index).getFileID() == fileID)
                {
                    file = files.get(index);
                    fileFound = true;
                }
                else
                    index++;
            }
        }
        return index;
    }
    //update the available size
    private void updateAvailSize() {
        int count = 0;
        for(int i = 0; i < 600; i++) {
            if(dir.sectors[i] == 0) {
                count++;
            }
        }
        AvailableSize.setText(count + "");
        UsedSpace.setText((600 - Integer.parseInt(AvailableSize.getText())) + "");
    }
    //returns the next available chunk in the directory
    private Chunk getNextChunk(VipeFile file) {
        int[] local = new int[file.getFileSize()];
        int count = 0;
        int spot = 0;
        while (count < file.getFileSize()) {
            if(dir.sectors[count] == 0) {
                local[spot] = count;
                count++;
                spot++;
            }
            else
                count++;
        }
        return new Chunk(local[0], local[local.length - 1]);
    }
    //writes file to the directory's sector array
    private void writeFile(VipeFile file) {
//        VipeFile local = file;
//        if(file.getFileSize() > 0 && getAvailableSize() > local.getFileSize()) {
//            int i = 0;
//            int count = 0;
//            while (i < local.getFileSize()) {
//                Chunk c = getNextChunk(local);
//                while(count < dir.sectors.length && i < local.getFileSize()) {
//                    if(dir.sectors[count] == 0){
//                        i++;
//                        dir.sectors[count] = local.getFileID();
//                        count++;
//                    }
//                    else
//                        count++;
//                }
//                local.chunks.add(c);
//            }
//            dir.files.add(local);
//        } This did not worked but i left it for reference
        int size = file.getFileSize();
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < dir.sectors.length; j++) {
                if (dir.sectors[j] == 0) {
                    dir.sectors[j] = file.getFileID();
                    break;
                }
            }
        }
        
        file.setChunks(dir.getChunks(file.getFileID()));
        
        dir.files.add(file);
    }
    //creates the 2DGraphic representation of the directory
    public void writeGrid() {
        int[] nums = dir.getSectors();
        Color[] colors = new Color[600];
        for(int i = 0; i < 600; i++)
            colors[i] = getColor(i);
        GridPanel a = (GridPanel)graphPanel;
        a.setSectors(nums);
        a.setColors(colors);
        graphPanel = a;
    }
    //ipdates the table
    public void updateTable() {
        DefaultTableModel tab = (DefaultTableModel) fileTable.getModel();
        while (tab.getRowCount() > 0)
            tab.removeRow(0);
        ArrayList<VipeFile> temp = dir.getFiles();
        int sum = 0;
        
        for(int i = 0; i < temp.size(); i++) {
           
            Object[] content = {temp.get(i).getFileName(), temp.get(i).getSectorColor(), 
                temp.get(i).getFileID(), temp.get(i).getFileSize()}; //creates an object to add
            tab.addRow(content);
            sum += temp.get(i).getFileSize();
        }

        
    }
    //gets the color based on id
        private Color getColor(int id) {
        Color color;
        int useable = id%6;
        switch (useable) {
            case 1 : color = Color.red; break;
            case 2 : color = Color.green; break;
            case 3 : color = Color.blue; break;
            case 4 : color = Color.yellow; break;
            case 5 : color = Color.magenta; break;
            case 6 : color = Color.orange; break;
            default: color = Color.white;
        }
        return color;
    }
    //removes the file from the directory and calls writeGrid()
    private void deleteFile(int fileID) {
        for (int i = 0; i < dir.sectors.length; i++) {
            if (dir.sectors[i] == fileID)
                dir.sectors[i] = 0;
        }
        for (int i = 0; i < dir.files.size(); i++) {
            if (dir.files.get(i).fileID == fileID)
                dir.files.remove(i);
        }
        dir.toString();
    }
    //edits a existing file
/*    private void editFile(int fileID, int sectorChange)  {
        for (VipeFile file : dir.files) {
            if (file.fileID == fileID) {
                //file.setFileSize(file.getFileSize() + sectorChange);
                if(Math.abs(sectorChange) > file.getFileSize()) {
                    
                }
            }
        }
        dir.toString();
    } */
    //edits the file selected/given
    public void editFile(int id, int change) {
        int spot = dir.getFileFromID(id);
        dir.files.get(spot).setFileSize(dir.files.get(spot).getFileSize() + change);
        int count = 0;
        int i = 0;
        while (count < change) {
            if(dir.sectors[i] == 0) {
                dir.sectors[i] = id;
                i++;
                count++;
            }
            else
                i++;
        }
        count = 0;
        i = 0;
        while (change < count) {
            if(dir.sectors[i] == id) {
                dir.sectors[i] = 0;
                i++;
                count--;
            }
            else
                i++;
        }
        writeGrid();
    }
    //return a File from an ID
    private VipeFile getFileFromID(int fileID) {
        for(VipeFile file : dir.files) {
            if (file.getFileID() == fileID)
                return file;
        }
        return null;
    }
     /**
     * @param args the command line arguments
     */
    //supposed to import data but unsupported
    private void importData() {
        throw new UnsupportedOperationException("Not supported yet."); 
        //To change body of generated methods, choose Tools | Templates.
        
    }
    //writes the data calls writeFile
    public void writeData(String fn, int fs) {
        String fileName = fn;
        int fileSize = fs;
        int fileID = getAvailableID();
        Color temp = getColor(fileID);
        VipeFile sendable = new VipeFile(fileSize, fileName, temp, fileID);
        writeFile(sendable);
    }
    //Deletes selected file
    public void deleteData(int id) {
        int fileID = id;
        deleteFile(fileID);
        System.out.println(dir);
    }
    //edits given file from id calls editFile
    public void editData(int id, int change) {
        int sizeChange = change;
        int fileID = id;
        editFile(fileID, sizeChange);
        dir.toString();
    }
    //gets next id available
    private int getAvailableID() {
        int max = 0;
        for (int i = 0; i < dir.files.size(); i++) {
            if (max < dir.files.get(i).getFileID()) {
                max = dir.files.get(i).getFileID();
            }
        }
        return max + 1;
    } 
    //save as method
    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        System.out.println("Save As");
        
        JFileChooser jfc = new JFileChooser();
        if(jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = jfc.getSelectedFile(); //creates file
                location = jfc.getSelectedFile(); // local variable for normal save
                FileOutputStream fos = new FileOutputStream(file); //sets mode to save
                ObjectOutputStream truck = new ObjectOutputStream(fos); //prepares truck for writing
                truck.writeObject(dir); //writes dir to the truck
            } catch (IOException exc) {
                String exception = exc.toString();
                JOptionPane.showMessageDialog(this, exception); //error handling
            }
        }
            
    }//GEN-LAST:event_SaveAsActionPerformed
    //if edit button in edit dialog is pressed
    private void EditDialog_EditFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDialog_EditFileButtonActionPerformed
        // TODO add your handling code here:
        if (new Integer(AvailableSize.getText()) < new Integer(EditDialog_NewSizeTextField.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Entry"); 
            return;
        }
        //error handeles empty parameter
        if(!EditDialog_NewSizeTextField.getText().equals("")) {
            try {
                Integer.parseInt(EditDialog_NewSizeTextField.getText());
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(this, nfe);
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Error Empty Parameter");
            editDialog.setVisible(false);
            editDialog.dispose();
        }
        try {
            int newID = (int) fileTable.getModel().getValueAt(fileTable.getSelectedRow(), 2);
            editFile(newID, new Integer(EditDialog_NewSizeTextField.getText()));
            //updates info
            updateTable();
            writeGrid();
            updateAvailSize();

            editDialog.setVisible(false);
            editDialog.dispose();

            EditDialog_NewSizeTextField.setText("");
        }
        
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, e); //error handling
        }
        
        
    }//GEN-LAST:event_EditDialog_EditFileButtonActionPerformed
    //what to do if cancel is pressed
    private void EditDialog_CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditDialog_CancelButtonActionPerformed
        // TODO add your handling code here:
        editDialog.setVisible(false); //hides the dialog
        editDialog.dispose(); //disposes of the dialog
    }//GEN-LAST:event_EditDialog_CancelButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        editDialog.setVisible(true); //shows the dialog
    }//GEN-LAST:event_editButtonActionPerformed
    //what to do when delete is pressed
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int deletedId = -1;
        deletedId = (int) fileTable.getModel().getValueAt(fileTable.getSelectedRow(), 2);
        if(deletedId != -1) { //error handling
            deleteFile(deletedId);  //deleted for dir
            //updates info
            writeGrid();
            updateTable();
            updateAvailSize();
        }
        else
            JOptionPane.showMessageDialog(this, "didnt select a file"); //checks if a file is selected
    }//GEN-LAST:event_deleteButtonActionPerformed
    //unused method
    private void UsedSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsedSpaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsedSpaceActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        if(location != null) {
            JFileChooser jfc = new JFileChooser();
            try {
                File file = jfc.getSelectedFile(); //creates file
                location = jfc.getSelectedFile(); // local variable for normal save
                FileOutputStream fos = new FileOutputStream(file); //sets mode to save
                ObjectOutputStream truck = new ObjectOutputStream(fos); //prepares truck for writing
                truck.writeObject(dir); //writes dir to the truck
            } catch (IOException exc) {
                String exception = exc.toString();
                JOptionPane.showMessageDialog(this, exception); //error handling
            }
        }
        else
            SaveAsActionPerformed(evt);
    }//GEN-LAST:event_SaveActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
        dir.setFiles(new ArrayList<VipeFile>());
        dir.sectors = new int[600];
        writeGrid();
        updateTable();
        updateAvailSize();
    }//GEN-LAST:event_NewActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        SaveActionPerformed(evt);
        System.exit(0);
    }//GEN-LAST:event_CloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddDialog_FileNameTextFiel;
    private javax.swing.JTextField AvailableSize;
    private javax.swing.JMenuItem Close;
    private javax.swing.JButton EditDialog_CancelButton;
    private javax.swing.JButton EditDialog_EditFileButton;
    private javax.swing.JTextField EditDialog_NewSizeTextField;
    private javax.swing.JMenuItem New;
    private javax.swing.JMenuItem OpenFile;
    private javax.swing.JMenuItem Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JTextField UsedSpace;
    private javax.swing.JButton addButton;
    private javax.swing.JDialog addDialog;
    private javax.swing.JButton addDialog_AddFileButton;
    private javax.swing.JButton addDialog_CancelButton;
    private javax.swing.JTextField addDialog_fileSizeTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JDialog editDialog;
    private javax.swing.JPanel edittingPanel;
    private javax.swing.JTable fileTable;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

}
